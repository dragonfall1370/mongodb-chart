apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mongodb-chart.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "mongodb-chart.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "mongodb-chart.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ include "mongodb-chart.name" . }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "mongodb-chart.name" . }}
        app.kubernetes.io/component: database
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and .Values.auth.enabled (not .Values.auth.existingSecret) }}
        checksum/auth-secret: {{ (printf "%s|%s|%s" .Values.auth.rootUser .Values.auth.rootPassword .Values.auth.keyFile) | sha256sum }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "mongodb-chart.serviceAccountName" . }}

      containers:
        - name: mongodb
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["mongod"]
          args:
            - "--bind_ip_all"
            - "--replSet={{ .Values.replicaSet.name }}"
            - "--auth"
            - "--keyFile=/etc/mongo-keyfile/keyfile"
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.auth.existingSecret }}{{ .Values.auth.existingSecret }}{{ else }}{{ include "mongodb-chart.fullname" . }}-auth{{ end }}
                  key: MONGODB_ROOT_USER
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.auth.existingSecret }}{{ .Values.auth.existingSecret }}{{ else }}{{ include "mongodb-chart.fullname" . }}-auth{{ end }}
                  key: MONGODB_ROOT_PASSWORD
          ports:
            - name: mongodb
              containerPort: 27017
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: keyfile-secret
              mountPath: /etc/mongo-keyfile
              readOnly: true
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - mongo --quiet --eval 'db.adminCommand("ping")' || mongosh --quiet --eval 'db.adminCommand("ping")'
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6

      volumes:
        - name: configdir
          emptyDir: {}
        {{- if not .Values.persistence.enabled }}
        - name: datadir
          emptyDir: {}
        {{- end }}
        - name: keyfile-secret
          secret:
            secretName: {{ if .Values.auth.existingSecret }}{{ .Values.auth.existingSecret }}{{ else }}{{ include "mongodb-chart.fullname" . }}-auth{{ end }}
            items:
              - key: KEYFILE_CONTENT
                path: keyfile
            defaultMode: 0400